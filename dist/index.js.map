{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.invalid] - return value when an input iterator yields a non-numeric value\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'invalid': NaN\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'invalid' ) ) {\n\t\topts.invalid = options.invalid;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which invokes a binary function accepting numeric arguments for each iterated value.\n*\n* ## Notes\n*\n* -   When invoked, the input function is provided two arguments:\n*\n*     -   `x`: iterated value from first input iterator\n*     -   `y`: iterated value from second input iterator\n*\n* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.\n*\n* -   If an iterated value is non-numeric (including `NaN`), the returned iterator returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.\n*\n* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.\n*\n* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.\n*\n* @param {Iterator} iter0 - first input iterator\n* @param {Iterator} iter1 - second input iterator\n* @param {Function} fcn - function to invoke\n* @param {Options} [options] - options\n* @param {*} [options.invalid=NaN] - return value when an input iterator yields a non-numeric value\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be an iterator protocol-compliant object\n* @throws {TypeError} third argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n* var copysign = require( '@stdlib/math-base-special-copysign' );\n*\n* var iter = iterMap2( randu(), randu(), copysign );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterMap2( iter0, iter1, fcn, options ) {\n\tvar iterators;\n\tvar values;\n\tvar types;\n\tvar niter;\n\tvar iter;\n\tvar opts;\n\tvar FLG;\n\tvar err;\n\tvar i;\n\n\tniter = 2;\n\tvalues = [ 0.0, 0.0 ];\n\n\titerators = [];\n\ttypes = [];\n\tfor ( i = 0; i < niter; i++ ) {\n\t\titerators.push( arguments[ i ] );\n\t\tif ( isIteratorLike( arguments[ i ] ) ) {\n\t\t\ttypes.push( 1 );\n\t\t} else if ( isNumber( arguments[ i ] ) ) {\n\t\t\ttypes.push( 0 );\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator protocol-compliant object or a number. Argument: `%u`. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\topts = {\n\t\t'invalid': NaN\n\t};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( types[ i ] && !isFunction( iterators[ i ][ iteratorSymbol ] ) ) { // eslint-disable-line max-len\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( !FLG ) {\n\t\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t\t}\n\t}\n\tFLG = false;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar err;\n\t\tvar v;\n\t\tvar i;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( types[ i ] ) {\n\t\t\t\tv = iterators[ i ].next();\n\t\t\t\tif ( v.done ) {\n\t\t\t\t\tFLG = true;\n\t\t\t\t\treturn v;\n\t\t\t\t}\n\t\t\t\tif ( typeof v.value === 'number' ) {\n\t\t\t\t\tvalues[ i ] = v.value;\n\t\t\t\t} else {\n\t\t\t\t\terr = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalues[ i ] = iterators[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( err ) {\n\t\t\treturn {\n\t\t\t\t'value': opts.invalid,\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': fcn( values[ 0 ], values[ 1 ] ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( types[ i ] ) {\n\t\t\t\targs.push( iterators[ i ][ iteratorSymbol ]() );\n\t\t\t} else {\n\t\t\t\targs.push( iterators[ i ] );\n\t\t\t}\n\t\t}\n\t\targs.push( fcn, opts );\n\t\treturn iterMap2.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterMap2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which invokes a binary function accepting numeric arguments for each iterated value.\n*\n* @module @stdlib/math-iter-tools-map2\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n* var copysign = require( '@stdlib/math-base-special-copysign' );\n* var iterMap2 = require( '@stdlib/math-iter-tools-map2' );\n*\n* var iter = iterMap2( randu(), randu(), copysign );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "format", "validate", "opts", "options", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isFunction", "isIteratorLike", "isNumber", "iteratorSymbol", "format", "validate", "iterMap2", "iter0", "iter1", "fcn", "options", "iterators", "values", "types", "niter", "iter", "opts", "FLG", "err", "i", "next", "end", "factory", "v", "value", "args", "main"]
}
