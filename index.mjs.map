{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isFunction from '@stdlib/assert-is-function';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which invokes a binary function accepting numeric arguments for each iterated value.\n*\n* ## Notes\n*\n* -   When invoked, the input function is provided two arguments:\n*\n*     -   `x`: iterated value from first input iterator\n*     -   `y`: iterated value from second input iterator\n*\n* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.\n*\n* -   If an iterated value is non-numeric (including `NaN`), the returned iterator returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.\n*\n* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.\n*\n* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.\n*\n* @param {Iterator} iter0 - first input iterator\n* @param {Iterator} iter1 - second input iterator\n* @param {Function} fcn - function to invoke\n* @param {Options} [options] - options\n* @param {*} [options.invalid=NaN] - return value when an input iterator yields a non-numeric value\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be an iterator protocol-compliant object\n* @throws {TypeError} third argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* import randu from '@stdlib/random-iter-randu';\n* import copysign from '@stdlib/math-base-special-copysign';\n*\n* var iter = iterMap2( randu(), randu(), copysign );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterMap2( iter0, iter1, fcn, options ) {\n\tvar iterators;\n\tvar values;\n\tvar types;\n\tvar niter;\n\tvar iter;\n\tvar opts;\n\tvar FLG;\n\tvar err;\n\tvar i;\n\n\tniter = 2;\n\tvalues = [ 0.0, 0.0 ];\n\n\titerators = [];\n\ttypes = [];\n\tfor ( i = 0; i < niter; i++ ) {\n\t\titerators.push( arguments[ i ] );\n\t\tif ( isIteratorLike( arguments[ i ] ) ) {\n\t\t\ttypes.push( 1 );\n\t\t} else if ( isNumber( arguments[ i ] ) ) {\n\t\t\ttypes.push( 0 );\n\t\t} else {\n\t\t\tthrow new TypeError( format( '0e34P', i, arguments[ i ] ) );\n\t\t}\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0e33N', fcn ) );\n\t}\n\topts = {\n\t\t'invalid': NaN\n\t};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( types[ i ] && !isFunction( iterators[ i ][ iteratorSymbol ] ) ) { // eslint-disable-line max-len\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( !FLG ) {\n\t\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t\t}\n\t}\n\tFLG = false;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar err;\n\t\tvar v;\n\t\tvar i;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( types[ i ] ) {\n\t\t\t\tv = iterators[ i ].next();\n\t\t\t\tif ( v.done ) {\n\t\t\t\t\tFLG = true;\n\t\t\t\t\treturn v;\n\t\t\t\t}\n\t\t\t\tif ( typeof v.value === 'number' ) {\n\t\t\t\t\tvalues[ i ] = v.value;\n\t\t\t\t} else {\n\t\t\t\t\terr = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalues[ i ] = iterators[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( err ) {\n\t\t\treturn {\n\t\t\t\t'value': opts.invalid,\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': fcn( values[ 0 ], values[ 1 ] ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( types[ i ] ) {\n\t\t\t\targs.push( iterators[ i ][ iteratorSymbol ]() );\n\t\t\t} else {\n\t\t\t\targs.push( iterators[ i ] );\n\t\t\t}\n\t\t}\n\t\targs.push( fcn, opts );\n\t\treturn iterMap2.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterMap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.invalid] - return value when an input iterator yields a non-numeric value\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'invalid': NaN\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0e32V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'invalid' ) ) {\n\t\topts.invalid = options.invalid;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["iterMap2","iter0","iter1","fcn","options","iterators","values","types","iter","opts","FLG","err","i","push","arguments","isIteratorLike","isNumber","TypeError","format","isFunction","invalid","NaN","length","isPlainObject","hasOwnProp","validate","setReadOnly","v","done","next","value","iteratorSymbol","args","apply"],"mappings":";;+xBAgFA,SAASA,EAAUC,EAAOC,EAAOC,EAAKC,GACrC,IAAIC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAOJ,IALQ,EACRN,EAAS,CAAE,EAAK,GAEhBD,EAAY,GACZE,EAAQ,GACFK,EAAI,EAAGA,EALL,EAKgBA,IAEvB,GADAP,EAAUQ,KAAMC,UAAWF,IACtBG,EAAgBD,UAAWF,IAC/BL,EAAMM,KAAM,OACN,KAAKG,EAAUF,UAAWF,IAGhC,MAAM,IAAIK,UAAWC,EAAQ,QAASN,EAAGE,UAAWF,KAFpDL,EAAMM,KAAM,EAGZ,CAEF,IAAMM,EAAYhB,GACjB,MAAM,IAAIc,UAAWC,EAAQ,QAASf,IAKvC,GAHAM,EAAO,CACNW,QAAWC,KAEPP,UAAUQ,OAAS,IACvBX,ECjEF,SAAmBF,EAAML,GACxB,OAAMmB,EAAenB,IAGhBoB,EAAYpB,EAAS,aACzBK,EAAKW,QAAUhB,EAAQgB,SAEjB,MALC,IAAIH,UAAWC,EAAQ,QAASd,GAMzC,CDyDQqB,CAAUhB,EAAML,GACjBO,GACJ,MAAMA,EASR,GAJAe,EADAlB,EAAO,CAAA,EACY,QAwBnB,WACC,IAAIG,EACAgB,EACAf,EACJ,GAAKF,EACJ,MAAO,CACNkB,MAAQ,GAGV,IAAMhB,EAAI,EAAGA,EA9DN,EA8DiBA,IACvB,GAAKL,EAAOK,GAAM,CAEjB,IADAe,EAAItB,EAAWO,GAAIiB,QACZD,KAEN,OADAlB,GAAM,EACCiB,EAEgB,iBAAZA,EAAEG,MACbxB,EAAQM,GAAMe,EAAEG,MAEhBnB,GAAM,CAEX,MACIL,EAAQM,GAAMP,EAAWO,GAG3B,GAAKD,EACJ,MAAO,CACNmB,MAASrB,EAAKW,QACdQ,MAAQ,GAGV,MAAO,CACNE,MAAS3B,EAAKG,EAAQ,GAAKA,EAAQ,IACnCsB,MAAQ,EAET,IA1DDF,EAAalB,EAAM,UAmEnB,SAAcsB,GAEb,GADApB,GAAM,EACDI,UAAUQ,OACd,MAAO,CACNQ,MAASA,EACTF,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IA3EIG,EAAiB,CACrB,IAAMnB,EAAI,EAAGA,EAlCN,EAkCiBA,IACvB,GAAKL,EAAOK,KAAQO,EAAYd,EAAWO,GAAKmB,IAAqB,CACpErB,GAAM,EACN,KACA,CAEIA,GACLgB,EAAalB,EAAMuB,GA2ErB,WACC,IAAIC,EACApB,EAGJ,IADAoB,EAAO,GACDpB,EAAI,EAAGA,EAzHN,EAyHiBA,IAClBL,EAAOK,GACXoB,EAAKnB,KAAMR,EAAWO,GAAKmB,MAE3BC,EAAKnB,KAAMR,EAAWO,IAIxB,OADAoB,EAAKnB,KAAMV,EAAKM,GACTT,EAASiC,MAAO,KAAMD,EAC7B,GAvFA,CAED,OADAtB,GAAM,EACCF,CAsFR"}